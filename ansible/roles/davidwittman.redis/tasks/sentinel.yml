---
- name: Create sentinel working directory
  ansible.builtin.file:
    path: "{{ redis_sentinel_dir }}"
    state: directory
    recurse: true
    owner: "{{ redis_user }}"

- name: Create sentinel init script
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/init.d/sentinel_{{ redis_sentinel_port }}
    mode: "0755"
  # Choose the distro-specific template. We must specify the templates
  # path here because with_first_found tries to find files in files/
  with_first_found:
    - files:
        - "{{ ansible_os_family }}/redis_sentinel.init.j2"
        - default/redis_sentinel.init.j2
      paths:
        - ../templates
  when: redis_as_service and ansible_service_mgr|default() != "systemd"

- name: Create sentinel systemd service
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/systemd/system/sentinel_{{ redis_sentinel_port }}.service
    mode: "0644"
  with_first_found:
    - files:
        - "{{ ansible_os_family }}/redis_sentinel.service.j2"
        - default/redis_sentinel.service.j2
      paths:
        - ../templates
  register: sentinel_unit_file
  when: redis_as_service and ansible_service_mgr|default() == "systemd"

- name: Create systemd tmpfiles configuration
  ansible.builtin.template:
    src: etc/tmpfiles.d/redis.conf.j2
    dest: /etc/tmpfiles.d/redis.conf
    mode: "0644"
  when:
    - redis_as_service
    - ansible_service_mgr|default() == "systemd"
    - (redis_sentinel_pidfile|dirname).startswith("/var/run") or (redis_sentinel_pidfile|dirname).startswith("/run")

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  when:
    - redis_as_service
    - ansible_service_mgr|default() == "systemd"
    - sentinel_unit_file is changed

- name: Set sentinel to start at boot
  ansible.builtin.service:
    name: sentinel_{{ redis_sentinel_port }}
    enabled: true
  when: redis_as_service

# Check then create log dir to prevent aggressively overwriting permissions
- name: Check if sentinel log directory exists
  ansible.builtin.stat:
    path: "{{ redis_sentinel_logfile | dirname }}"
  register: sentinel_logdir
  changed_when: false
  when: redis_sentinel_logfile != '""'

- name: Create sentinel log directory if it does not exist
  ansible.builtin.file:
    state: directory
    path: "{{ redis_sentinel_logfile | dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_sentinel_logfile != '""'
    - not sentinel_logdir.stat.exists

- name: Touch the sentinel log file
  ansible.builtin.file:
    state: touch
    path: "{{ redis_sentinel_logfile }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when: redis_sentinel_logfile != '""'

- name: Check if sentinel pid directory exists
  ansible.builtin.stat:
    path: "{{ redis_sentinel_pidfile | dirname }}"
  register: sentinel_piddir
  changed_when: false
  when: redis_sentinel_pidfile != '""'

- name: Create sentinel pid directory if it does not exist
  ansible.builtin.file:
    state: directory
    path: "{{ redis_sentinel_pidfile | dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_sentinel_pidfile != '""'
    - not sentinel_piddir.stat.exists

- name: Create sentinel config file
  ansible.builtin.template:
    src: redis_sentinel.conf.j2
    dest: /etc/redis/sentinel_{{ redis_sentinel_port }}.conf
    owner: "{{ redis_user }}"
    mode: "0640"
  notify: restart sentinel

- name: Add sentinel init config file
  ansible.builtin.template:
    dest: /etc/sysconfig/sentinel_{{ redis_sentinel_port }}
    src: redis.init.conf.j2
  when: ansible_os_family == "RedHat"
  notify: restart sentinel

- name: Add sentinel init config file
  ansible.builtin.template:
    dest: /etc/default/sentinel_{{ redis_sentinel_port }}
    src: redis.init.conf.j2
  when: ansible_os_family == "Debian"
  notify: restart sentinel

# Flush handlers before ensuring the service is started to prevent
# a start and then restart
- name: Flush handlers to apply config changes
  ansible.builtin.meta: flush_handlers
- name: Ensure sentinel is running
  ansible.builtin.service:
    name: sentinel_{{ redis_sentinel_port }}
    state: started
  when: redis_as_service
