---
- name: Create redis working directory
  ansible.builtin.file:
    path: "{{ redis_dir }}"
    state: directory
    recurse: true
    owner: "{{ redis_user }}"

- name: Create redis init script
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/init.d/{{ redis_service_name }}
    mode: "0755"
  # Choose the distro-specific template. We must specify the templates
  # path here because with_first_found tries to find files in files/
  with_first_found:
    - files:
        - "{{ ansible_os_family }}/redis.init.j2"
        - default/redis.init.j2
      paths:
        - ../templates
  when: redis_as_service and ansible_service_mgr|default() != "systemd"

- name: Create redis systemd service
  ansible.builtin.template:
    src: "{{ item }}"
    dest: /etc/systemd/system/{{ redis_service_name }}.service
    mode: "0644"
  with_first_found:
    - files:
        - "{{ ansible_os_family }}/redis.service.j2"
        - default/redis.service.j2
      paths:
        - ../templates
  register: redis_unit_file
  when: redis_as_service and ansible_service_mgr|default() == "systemd"

- name: Create systemd tmpfiles configuration
  ansible.builtin.template:
    src: etc/tmpfiles.d/redis.conf.j2
    dest: /etc/tmpfiles.d/redis.conf
    mode: "0644"
  when:
    - redis_as_service
    - ansible_service_mgr|default() == 'systemd'
    - (redis_pidfile|dirname).startswith('/var/run') or (redis_pidfile|dirname).startswith('/run')

- name: Reload systemd daemon
  ansible.builtin.systemd:
    daemon_reload: true
  when:
    - redis_as_service
    - ansible_service_mgr|default() == "systemd"
    - redis_unit_file is changed

- name: Set redis to start at boot
  ansible.builtin.service:
    name: "{{ redis_service_name }}"
    enabled: true
  when: redis_as_service

# Check then create log dir to prevent aggressively overwriting permissions
- name: Check if log directory exists
  ansible.builtin.stat:
    path: "{{ redis_logfile | dirname }}"
  register: logdir
  changed_when: false
  when: redis_logfile != '""'

- name: Create log directory if it does not exist
  ansible.builtin.file:
    state: directory
    path: "{{ redis_logfile | dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_logfile != '""'
    - not logdir.stat.exists

- name: Create log file if it does not exist
  ansible.builtin.copy:
    dest: "{{ redis_logfile }}"
    content: ""
    force: false # Don't override file contet if the file already exits
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when: redis_logfile != '""'

- name: Update permissions of log file if needed
  ansible.builtin.file:
    state: file
    path: "{{ redis_logfile }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when: redis_logfile != '""'

- name: Check if pid directory exists
  ansible.builtin.stat:
    path: "{{ redis_pidfile | dirname }}"
  register: piddir
  changed_when: false
  when: redis_pidfile != '""'

- name: Create pid directory if it does not exist
  ansible.builtin.file:
    state: directory
    path: "{{ redis_pidfile | dirname }}"
    owner: "{{ redis_user }}"
    group: "{{ redis_group }}"
  when:
    - redis_pidfile != '""'
    - not piddir.stat.exists

- name: Create redis config file
  ansible.builtin.template:
    src: redis.conf.j2
    dest: /etc/redis/{{ redis_config_file_name }}
    owner: "{{ redis_user }}"
    mode: "0640"
  notify: Restart redis

- name: Add redis init config file
  ansible.builtin.template:
    dest: /etc/sysconfig/{{ redis_service_name }}
    src: redis.init.conf.j2
    mode: "0600"
  when: ansible_os_family == "RedHat"
  notify: Restart redis

- name: Add redis init config file
  ansible.builtin.template:
    dest: /etc/default/{{ redis_service_name }}
    src: redis.init.conf.j2
    mode: "0600"
  when: ansible_os_family == "Debian"
  notify: Restart redis

# Flush handlers before ensuring the service is started to prevent
# a start and then restart
- name: Flush handlers to apply config changes
  ansible.builtin.meta: flush_handlers
- name: Ensure redis is running
  ansible.builtin.service:
    name: "{{ redis_service_name }}"
    state: started
  when: redis_as_service
