---

- name: include OS-specific tasks
  include: "{{ ansible_os_family }}.yml"

- name: create deluge group
  ansible.builtin.group:
    name: "{{ deluge_service_group }}"
    state: present
  become: true
  become_user: root

- name: Get all users from device
  ansible.builtin.getent:
    database: passwd
    key:

- name: set fact when user exists
  ansible.builtin.set_fact:
    user_exists: true
  when: deluge_service_user in ansible_facts.getent_passwd

- name: set fact when user does not exists
  ansible.builtin.set_fact:
    user_exists: false
  when: deluge_service_user not in ansible_facts.getent_passwd

- name: Create deluge user
  ansible.builtin.user:
    name: "{{ deluge_service_user }}"
    group: "{{ deluge_service_group }}"
    comment: "Deluge Service"
    create_home: true
    home: "{{ deluge_home }}"
    system: true
  when:
    - not user_exists
  become: true
  become_user: root

- name: Check for Log dir
  ansible.builtin.stat:
    path: "{{ deluge_log_dir | dirname }}"
  register: _deluge_log_dir
  tags:
    - deluge

- name: Create logging directory
  ansible.builtin.file:
    path: "{{ deluge_log_dir }}"
    state: directory
    mode: '0750'
    owner: "{{ deluge_service_user }}"
    group: "{{ deluge_service_group }}"
  when:
    - _deluge_log_dir is defined
    - not _deluge_log_dir.stat.exists
  tags:
    - deluge
  become: true

- name: Check for Download dir
  ansible.builtin.stat:
    path: "{{ deluge_download_location | dirname }}"
  register: _deluge_download_location
  tags:
    - deluge

- name: Deluge download directory should be created
  ansible.builtin.file:
    path: "{{ deluge_download_location }}"
    owner: "{{ deluge_service_user }}"
    group: "{{ deluge_service_group }}"
    mode: '0755'
    recurse: true
    state: directory
  when:
    - _deluge_download_location is defined
    - not _deluge_download_location.stat.exists
  become: true
  tags:
    - deluge

- name: Include systemd configs
  include: systemd.yml
