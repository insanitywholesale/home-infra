---
name: CI

on:
  push:
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  yaml_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running YAMLlint
        uses: "docker://pipelinecomponents/yamllint:latest"
        with:
          args: yamllint .
  remark_lint:
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v1
      - name: Running Remark lint
        uses: "docker://pipelinecomponents/remark-lint:latest"
        continue-on-error: true
        with:
          args: "remark --no-stdout --color --frail --use preset-lint-recommended ."
  #ansible_lint:
   # runs-on: ubuntu-latest
  #  steps:
  #    - name: Getting your configuration from GitHub
   #     uses: actions/checkout@v2
      #- name: Lint Ansible Role
      #  uses: ansible-community/ansible-lint-action@main
  check_role:
    runs-on: ubuntu-latest
    needs: [yaml_lint, remark_lint]
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        distro:
          #- centos8
          #- centos7
          - ubuntu2204
          - ubuntu2004
          - debian11
          - debian10
        playbook:
          - converge.yml
    env:
      ANSIBLE_CALLBACK_WHITELIST: profile_tasks
      ROLE_NAME: deluge

    steps:
      - name: Check out the codebase.
        uses: actions/checkout@v2

      - name: Set up Python 3.
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install test dependencies.
        run: pip3 install ansible molecule[docker] docker

      - name: Run Molecule tests.
        run: molecule test
        env:
          PY_COLORS: '1'
          ANSIBLE_FORCE_COLOR: '1'
          MOLECULE_DISTRO: ${{ matrix.distro }}
          MOLECULE_PLAYBOOK: ${{ matrix.playbook }}
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: [check_role]
    runs-on: ubuntu-latest
    steps:
      - name: Getting your configuration from GitHub
        uses: actions/checkout@v2
      - name: üõéÔ∏è Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          prerelease: ${{ contains(needs.tag_version.outputs.tag, '-rc*') || contains(needs.tag_version.outputs.tag, '-b*') || contains(needs.tag_version.outputs.tag, '-a*') }}
      - name: üè∑Ô∏è Update latest tag
        uses: EndBug/latest-tag@latest
      - name: Update Ansible Galaxy
        uses: robertdebock/galaxy-action@1.2.0
        with:
          galaxy_api_key: ${{ secrets.GALAXY_API_KEY }}
